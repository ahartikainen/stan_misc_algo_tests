name: Cpp

on:
    push:
      branches:
        - '**'

jobs:
  cpp_run:
    name: Cpp
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: ["3.9"]
    steps:
      - name: Checkout github
        uses: actions/checkout@v2

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
            activate-environment: cmdstanpy-env
            environment-file: cmdstanpy-environment.yml
            python-version: ${{ matrix.python-version }}
            condarc-file: cmdstanpy-condarc.yml

      - name: conda check
        run: |
          conda info
          conda list
          conda env list


      - name: CmdStanPy and CmdStan versions
        run: |
          python -c 'import cmdstanpy;print("\n\ncmdstanpy version: {}\ncmdstan version: {}\n".format(cmdstanpy.__version__, cmdstanpy.cmdstan_path()))'

      # - name: Inject logger
      #   run: |
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/util/initialize.hpp" 2>/dev/null | xargs sed -i 's/#include <string>/#include <string>\n#include <iostream>\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/util/initialize.hpp" 2>/dev/null | xargs sed -i 's/unconstrained = random_context.get_unconstrained();/unconstrained = random_context.get_unconstrained(); std::stringstream umsg; umsg << "unconstrained "; for (int i=0; i < unconstrained.size(); i++) {umsg << std::scientific << std::setprecision(15) << unconstrained[i] << " ";} std::cout << umsg.str();\n/ w /dev/stdout'

      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/sample/hmc_nuts_diag_e_adapt.hpp" 2>/dev/null | xargs sed -i 's/#include <vector>/#include <vector>\n#include <iostream>\n#include <string>\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/sample/hmc_nuts_diag_e.hpp" 2>/dev/null | xargs sed -i 's/#include <vector>/#include <vector>\n#include <iostream>\n#include <string>\n/ w /dev/stdout'

      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/sample/hmc_nuts_diag_e_adapt.hpp" 2>/dev/null | xargs sed -i 's/boost::ecuyer1988 rng = util::create_rng(random_seed, chain);/boost::ecuyer1988 rng = util::create_rng(random_seed, chain); std::stringstream rmsg; rmsg << "rng "; boost::random::uniform_real_distribution<double> unif(-2.0, 2.0); rmsg << std::scientific << std::setprecision(15) <<  unif(rng); std::cout << rmsg.str() << std::endl;\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/sample/hmc_nuts_diag_e.hpp" 2>/dev/null | xargs sed -i 's/boost::ecuyer1988 rng = util::create_rng(random_seed, chain);/boost::ecuyer1988 rng = util::create_rng(random_seed, chain); std::stringstream rmsg; rmsg << "rng "; boost::random::uniform_real_distribution<double> unif(-2.0, 2.0); rmsg << std::scientific << std::setprecision(15) << unif(rng); std::cout << rmsg.str() << std::endl;\n/ w /dev/stdout'

      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/sample/hmc_nuts_diag_e_adapt.hpp" 2>/dev/null | xargs sed -i 's/sampler.get_stepsize_adaptation().set_t0(t0);/sampler.get_stepsize_adaptation().set_t0(t0); std::stringstream rmsg2; rmsg2 << "rng "; rmsg2 << std::scientific << std::setprecision(15) << unif(rng); std::cout << rmsg2.str() << std::endl;\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/sample/hmc_nuts_diag_e.hpp" 2>/dev/null | xargs sed -i 's/sampler.get_stepsize_adaptation().set_t0(t0);/sampler.get_stepsize_adaptation().set_t0(t0); std::stringstream rmsg2; rmsg2 << "rng "; rmsg2 << std::scientific << std::setprecision(15) << unif(rng); std::cout << rmsg2.str() << std::endl;\n/ w /dev/stdout'

      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/sample/hmc_nuts_diag_e_adapt.hpp" 2>/dev/null | xargs sed -i 's/sampler.set_max_depth(max_depth);/sampler.set_max_depth(max_depth); std::stringstream umsg; umsg << " stepsize " << std::scientific << std::setprecision(15) << stepsize; umsg << " stepsize_jitter " << std::scientific << std::setprecision(15) << stepsize_jitter; umsg << " max_depth " << std::scientific << std::setprecision(15) << max_depth; umsg << " delta " << std::scientific << std::setprecision(15) << delta; umsg << " gamma " << std::scientific << std::setprecision(15) << gamma; umsg << " kappa " << std::scientific << std::setprecision(15) << kappa; umsg << " t0 " << std::scientific << std::setprecision(15) << t0; std::cout << umsg.str() << std::endl;\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/sample/hmc_nuts_diag_e.hpp" 2>/dev/null | xargs sed -i 's/sampler.set_max_depth(max_depth);/sampler.set_max_depth(max_depth); std::stringstream umsg; umsg << " stepsize " << std::scientific << std::setprecision(15) << stepsize; umsg << " stepsize_jitter " << std::scientific << std::setprecision(15) << stepsize_jitter; umsg << " max_depth " << std::scientific << std::setprecision(15) << max_depth; std::cout << umsg.str() << std::endl;\n/ w /dev/stdout'

      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/util/run_adaptive_sampler.hpp" 2>/dev/null | xargs sed -i 's/#include <vector>/#include <vector>\n#include <iostream>\n#include <string>\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/util/run_sampler.hpp" 2>/dev/null | xargs sed -i 's/#include <vector>/#include <vector>\n#include <iostream>\n#include <string>\n/ w /dev/stdout'

      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/util/run_adaptive_sampler.hpp" 2>/dev/null | xargs sed -i 's/clock_t start = clock();/clock_t start = clock(); std::stringstream rmsg; rmsg << "rng_start "; boost::random::uniform_real_distribution<double> unif(-2.0, 2.0); rmsg << std::scientific << std::setprecision(15) << unif(rng); std::cout << rmsg.str() << std::endl;\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*services/util/run_sampler.hpp" 2>/dev/null | xargs sed -i 's/clock_t start = clock();/clock_t start = clock(); std::stringstream rmsg; rmsg << "rng_start "; boost::random::uniform_real_distribution<double> unif(-2.0, 2.0); rmsg << std::scientific << std::setprecision(15) << unif(rng); std::cout << rmsg.str() << std::endl;\n/ w /dev/stdout'

      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*stan/mcmc/hmc/base_hmc.hpp" 2>/dev/null | xargs sed -i 's/#include <string>/#include <string>\n#include <iostream>/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*stan/mcmc/hmc/base_hmc.hpp" 2>/dev/null | xargs sed -i 's/int direction = delta_H > std::log(0.8) ? 1 : -1;/int direction = delta_H > std::log(0.8) ? 1 : -1;\nstd::stringstream mymsg; mymsg << "not while H0 " << std::scientific << std::setprecision(15) << H0 << " h " << std::scientific << std::setprecision(15) << h << " delta_H " << std::scientific << std::setprecision(15) << delta_H << " direction " << std::scientific << std::setprecision(15) << direction; std::cout << mymsg.str() << std::endl; std::stringstream mymsg2;\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*stan/mcmc/hmc/base_hmc.hpp" 2>/dev/null | xargs sed -i 's/\n          double delta_H = H0 - h;/\n          double delta_H = H0 - h;\n  mymsg2 << "while H0 " << std::scientific << std::setprecision(15) << H0 << " h " << std::scientific << std::setprecision(15) << h << " delta_H " << std::scientific << std::setprecision(15) << delta_H << std::endl;\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*stan/mcmc/hmc/base_hmc.hpp" 2>/dev/null | xargs sed -i 's/\n        this->z_.ps_point::operator=(z_init);/\n        this->z_.ps_point::operator=(z_init);\n  std::cout << mymsg2.str() << std::endl;\n/ w /dev/stdout'

      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*stan/mcmc/stepsize_adaptation.hpp" 2>/dev/null | xargs sed -i 's/#include <cmath>/#include <cmath>\n#include <string>\n#include <iostream>\n/ w /dev/stdout'
      #     find /usr/share/miniconda/envs/cmdstanpy-env/bin/cmdstan -type f -wholename "*stan/mcmc/stepsize_adaptation.hpp" 2>/dev/null | xargs sed -i 's/epsilon = std::exp(x);/epsilon = std::exp(x);\nstd::cout << "LEARN STEPSIZE adapt_stat " << std::scientific << std::setprecision(15) << adapt_stat << " eta " << std::scientific << std::setprecision(15) << eta << " s_bar_ " << std::scientific << std::setprecision(15) << s_bar_ << " x " << std::scientific << std::setprecision(15) << x << " exp(x) " << std::scientific << std::setprecision(15) << epsilon << " x_eta " << std::scientific << std::setprecision(15) << x_eta << std::endl;\n/ w /dev/stdout'
      #   if: "matrix.os == 'ubuntu-latest'"

      - name: CmdStanPy seed test
        run: |
          python run_cmdstanpy.py

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: Upload stdout files
      #     path: ./*.txt
